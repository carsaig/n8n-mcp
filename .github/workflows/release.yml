name: Release (ARM64) to GHCR + Coolify

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/carsaig/n8n-mcp
  COOLIFY_WEBHOOK_URL: https://coolify.certain.cc/api/v1/deploy?uuid=dokk88s84sgcwg848k044o4k&force=false

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next version tag (patch bump)
        id: version
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force
          LATEST=$(git tag -l 'v*' --sort=-v:refname | head -n1 || true)
          if [[ -z "$LATEST" ]]; then
            LATEST="v0.0.0"
          fi
          # bump patch
          ver="${LATEST#v}"
          IFS='.' read -r MA MI PA <<<"$ver"
          if [[ -z "$MA" || -z "$MI" || -z "$PA" ]]; then
            echo "Unexpected latest tag format: $LATEST" >&2
            exit 1
          fi
          NEXT="v${MA}.${MI}.$((PA+1))"
          echo "VERSION=${NEXT}" | tee -a "$GITHUB_ENV"
          echo "version=${NEXT}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (ARM64 only)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Create GitHub Release (auto notes)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Load secrets from 1Password
        uses: 1password/load-secrets-action@v2
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          COOLIFY_API_KEY: "op://SECRETS/Coolify/API_Token"

      - name: Trigger Coolify Deploy (by UUID)
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL -X POST \
            -H "Authorization: Bearer ${COOLIFY_API_KEY}" \
            "$COOLIFY_WEBHOOK_URL"

